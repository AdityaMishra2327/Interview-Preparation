Binary Search is an efficient algorithm for finding an element in a sorted array. It works by repeatedly dividing the search interval in half. The **time complexity** is \(O(\log n)\), making it one of the fastest search methods for sorted data.

## **1. Introduction to Binary Search**

### **Key Points**
1. Binary Search requires a **sorted array**.
2. It works by comparing the middle element with the target:
   - If the middle element equals the target, return the index.
   - If the middle element is less than the target, search in the right half.
   - Otherwise, search in the left half.

---

### **Algorithm for Binary Search**
```python
def binary_search(arr, target):
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (low + high) // 2  # Middle index
        if arr[mid] == target:
            return mid  # Target found
        elif arr[mid] < target:
            low = mid + 1  # Search in the right half
        else:
            high = mid - 1  # Search in the left half

    return -1  # Target not found
```

---

## **2. Variations of Binary Search**

### **a- Find the First Occurrence**
Find the first occurrence of a target in a sorted array:
```python
def find_first(arr, target):
    low, high = 0, len(arr) - 1
    result = -1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            high = mid - 1  # Continue searching in the left half
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return result
```

---

### **b- Find the Last Occurrence**
Find the last occurrence of a target in a sorted array:
```python
def find_last(arr, target):
    low, high = 0, len(arr) - 1
    result = -1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            result = mid
            low = mid + 1  # Continue searching in the right half
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return result
```

---

### **c- Count Occurrences of a Target**
```python
def count_occurrences(arr, target):
    first = find_first(arr, target)
    if first == -1:
        return 0  # Target not found
    last = find_last(arr, target)
    return last - first + 1
```

---

## **3. Bisect Module (Python)**

Python's `bisect` module simplifies the process of binary search and provides efficient methods for working with sorted arrays.

### **Key Functions**
1. **`bisect_left`**: Finds the leftmost position to insert a target to maintain sorted order.
2. **`bisect_right`**: Finds the rightmost position to insert a target to maintain sorted order.

Both methods are in \(O(\log n)\).

---

### **Using `bisect_left`**
Find the first index where the target could be inserted to maintain order:
```python
from bisect import bisect_left

arr = [1, 2, 4, 4, 4, 6, 7]
target = 4
index = bisect_left(arr, target)
print("Leftmost index:", index)  # Output: 2
```

---

### **Using `bisect_right`**
Find the first index where the target is greater to maintain order:
```python
from bisect import bisect_right

arr = [1, 2, 4, 4, 4, 6, 7]
target = 4
index = bisect_right(arr, target)
print("Rightmost index:", index)  # Output: 5
```

---

### **Finding Occurrences with Bisect**
Count the occurrences of a target:
```python
from bisect import bisect_left, bisect_right

def count_occurrences(arr, target):
    left = bisect_left(arr, target)
    right = bisect_right(arr, target)
    return right - left

arr = [1, 2, 4, 4, 4, 6, 7]
target = 4
print("Occurrences of target:", count_occurrences(arr, target))  # Output: 3
```

---

### **Comparison Between Binary Search and Bisect**
| Feature                     | Binary Search              | Bisect Module              |
|-----------------------------|----------------------------|----------------------------|
| Requires manual implementation | Yes                        | No                         |
| Built-in support             | No                         | Yes                        |
| Handles multiple occurrences | Custom logic required       | Easy with `bisect_left` and `bisect_right` |

---

## **4. Applications of Binary Search**
- Searching in sorted data.
- Solving range queries using `bisect`.
- Finding peaks or valleys in data.
- Solving optimization problems like allocating resources.

---

## **5. Time Complexity**
- **Binary Search**: \(O(\log n)\)
- **Bisect Functions**: \(O(\log n)\)

Both are efficient for large sorted datasets.

Let me know if you need additional examples or advanced variations!