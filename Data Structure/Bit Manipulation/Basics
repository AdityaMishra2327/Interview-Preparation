## **Bit Manipulation** :

### **1. Conversion: Binary to Decimal & Decimal to Binary**

#### **Binary to Decimal**

##### Method 1 :
**Python Implementation:**
```python
binary = "1101"  # Binary number as a string
decimal = 0

# Iterate through each bit in reverse order
for i, bit in enumerate(binary[::-1]):
    decimal += int(bit) * (2 ** i)

print("Decimal:", decimal)  # Output: 13
```

##### Method 2 :
**Python Implementation:**
```python
binary = "1101"  # Binary number as a string
decimal = int(binary, 2)
print("Decimal:", decimal)  # Output: 13
```

---

#### **Decimal to Binary**

##### Method 1 :
**Python Implementation:**
```python
decimal = 13
binary = ""

while decimal > 0:
    remainder = decimal % 2
    binary = str(remainder) + binary
    decimal //= 2

print("Binary:", binary)  # Output: 1101

```

##### Method 2 :
**Python Implementation:**
```python
decimal = 13
binary = bin(decimal)[2:]  # Remove '0b' prefix
print("Binary:", binary)  # Output: 1101
```

---

### **1's Complementary**

The **1's complement** of a binary number inverts all bits (0 becomes 1, and 1 becomes 0).

**Python Implementation:**
```python
binary = "1101"
ones_complement = ''.join('1' if bit == '0' else '0' for bit in binary)
print("1's Complement:", ones_complement)  # Output: 0010
```

---

### **3. 2's Complementary**

The **2's complement** is obtained by:
1. Taking the 1's complement.
2. Adding 1 to the result.

**Python Implementation:**
```python
binary = "1101"
ones_complement = ''.join('1' if bit == '0' else '0' for bit in binary)
decimal_value = int(ones_complement, 2) + 1
twos_complement = bin(decimal_value)[2:]
print("2's Complement:", twos_complement)  # Output: 0011
```

---

### **4. Bitwise Operators**

#### **AND (`&`)**
Compares each bit of two numbers and returns `1` if both are `1`.

Example:
```python
a = 5  # Binary: 0101
b = 3  # Binary: 0011
result = a & b  # Binary: 0001
print(result)  # Output: 1
```

#### **OR (`|`)**
Compares each bit and returns `1` if at least one is `1`.

Example:
```python
result = a | b  # Binary: 0111
print(result)  # Output: 7
```

#### **XOR (`^`)**
- if no. of 1's -> odd -> 1
- if no. of 1's -> even -> 0 

Example:
```python
res = 1010 XOR 1100
result = a ^ b  # Binary: 0110
print(result)  # Output: 6
```

#### **NOT (`~`)**
Inverts all bits of the number. It also changes the sign in Python (due to signed integers).

Example:
```python
a = 5  # Binary: 0101
result = ~a  # Binary: -(0101 + 1) = -6
print(result)  # Output: -6
```

#### **Left Shift (`<<`)**
Shifts bits to the left, adding `0`s on the right.
***Note: (n<<k) = (n*(2)**k)***

Example:
```python
a = 13/1101
result = a << 1  # Binary: 11010
print(result)  # Output: 26
```
-- Dry Run to the example :-
--> left shift by 1
a = 13 = 1101 
after right shift -> 11010/26 -> output

--> right shift by 2
a = 13 = 1101 
after right shift -> 110100/52 -> output

#### **Right Shift (`>>`)**
Shifts bits to the right, removing bits on the right.
***Note: (n>>k) = (n/(2)**k)***

Example:
```python
a = 13
result = a >> 1  # Binary: 0110
print(result)  # Output: 6
```
-- Dry Run to the example :-
--> right shift by 1
a = 13 = 1101 
after right shift -> 0110/6 -> output

--> right shift by 2
a = 13 = 1101 
after right shift -> 0011/3 -> output

---

### **5. Representing Negative Decimal Numbers in Binary**

Python uses **two's complement representation** for negative numbers.

#### Example:
For -5:
1. Write +5 in binary: `0101` (4 bits).
2. Find the 1's complement: `1010`.
3. Add 1: `1011` -> basically, doing 2's complement

In Python:
```python
decimal = -5
binary = bin(decimal & 0b1111)[2:]  # Get binary representation of 4-bit number
print(binary)  # Output: 1011
```
Steps : 
- Binary of 5: 00000101
- Invert: 11111010
- Add 1: 11111011

Alternatively, for any size:
```python
decimal = -5
binary = bin(decimal & (2**8 - 1))[2:]  # For 8-bit representation
print(binary)  # Output: 11111011
```

Note -:
- Largest number, we can store : 2**31-1 as 1 bit is for sign(0 for +ve and 1 for -ve)
- Smallest number, we can store : -2**31