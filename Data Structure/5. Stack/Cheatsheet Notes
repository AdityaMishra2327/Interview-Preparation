 Stack - Concise Notes

Definition:  
A Stack is a linear data structure that follows the LIFO (Last In, First Out) principle, meaning the last element added is the first one to be removed.

Key Operations:
1. Push: Add an element to the top of the stack.
2. Pop: Remove and return the top element from the stack.
3. Peek/Top: Retrieve the top element without removing it.
4. isEmpty: Check if the stack is empty.

Time Complexity:
- Push: O(1)
- Pop: O(1)
- Peek: O(1)
- isEmpty: O(1)

Implementation:
- Can be implemented using an array or a linked list.

---

 Applications of Stack

1. Expression Evaluation and Conversion:
   - Infix to Postfix conversion.
   - Postfix Evaluation.
   - Balanced Parentheses checking.

2. Function Call Stack:
   - Stores the active function calls in languages like C, C++, and Python. It helps in managing recursive function calls.

3. Undo Mechanism in Software:
   - Used in text editors or applications where undo functionality is needed (stores previous states).

4. Backtracking Algorithms:
   - Helps in problems like maze solving or traversing a tree/graph by keeping track of the path (DFS uses a stack).

5. Browser History Navigation:
   - The "back" functionality uses a stack to store visited pages.

6. Memory Management:
   - Stack memory is used to store local variables and function calls in programming.

---

 Important Stack-based Algorithms

1. Balanced Parentheses:
   - Problem: Check if every opening parenthesis has a matching closing parenthesis in an expression.
   - Approach: Traverse the expression and push opening parentheses to the stack. For closing parentheses, pop from the stack and check if they match.

2. Next Greater Element:
   - Problem: For every element in an array, find the next greater element.
   - Approach: Use a stack to keep track of elements and find the next greater for each element efficiently.

3. Stock Span Problem:
   - Problem: For each day’s stock price, find how many consecutive previous days have a price less than or equal to today’s price.
   - Approach: Use a stack to maintain indices of the stock prices.

4. Depth First Search (DFS) (for Graphs and Trees):
   - Problem: Traverse or search through a graph or tree.
   - Approach: Use a stack to track the vertices (or nodes) for DFS traversal.

5. Tower of Hanoi:
   - Problem: Solve the Tower of Hanoi puzzle using recursion and stacks.
   - Approach: Recursively move disks between stacks (representing rods) following the rules of the puzzle.

---

 Limitations:
- Stacks have limited access; only the top element can be accessed directly.
- Fixed-size stacks (using arrays) have limited capacity unless resized dynamically.

Conclusion: Stacks are a powerful tool in various scenarios involving recursion, reversal of data, and maintaining order of operations, making them essential in algorithm design.