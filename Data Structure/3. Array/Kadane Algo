 Kadane's Algorithm

Purpose: Finds the maximum sum of a contiguous subarray in an array of integers. This is useful in scenarios where you want to maximize a subarray's sum, especially when some elements are negative.

Time Complexity: \(O(n)\) - because it involves a single scan of the array.

Space Complexity: \(O(1)\) - only a few variables are used.

 Steps:

1. Initialize:
   - `max_so_far = arr[0]` - stores the maximum sum found so far.
   - `max_ending_here = arr[0]` - stores the maximum sum of the subarray ending at the current index.

2. Iterate through Array:
   - For each element `arr[i]` (from index `1` to the end):
     - Update `max_ending_here = max(arr[i], max_ending_here + arr[i])`
       - This step decides if the current element starts a new subarray or extends the current subarray.
     - Update `max_so_far = max(max_so_far, max_ending_here)`
       - This step updates the overall maximum if `max_ending_here` is greater than `max_so_far`.

3. Result:
   - After the loop, `max_so_far` will hold the maximum sum of any contiguous subarray in the array.

 Edge Cases:
- All elements are negative: Kadane’s Algorithm will return the largest (least negative) element.
- Single element array: Kadane’s works directly as the only element is the maximum subarray sum.

---

Example:

For array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`:
- Kadane’s Algorithm finds the maximum sum subarray `[4, -1, 2, 1]` with a sum of `6`.

 Code:

```python
def kadane_algorithm(arr):
    max_so_far = arr[0]
    max_ending_here = arr[0]

    for i in range(1, len(arr)):
        max_ending_here = max(arr[i], max_ending_here + arr[i])
        max_so_far = max(max_so_far, max_ending_here)
    
    return max_so_far
```

