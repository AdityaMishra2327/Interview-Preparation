 1. Basic Git Concepts
   - Version Control: Git is a distributed version control system that helps track changes in source code during software development.
   - Repository: A directory or storage space where your code and its version history are stored.
   - Commit: A snapshot of your project at a certain point in time. Think of it as saving a version of your work.
   - Branch: A separate line of development. Main branches include `main` or `master`, but you can create other branches to work on different features.

 2. Important Git Commands
   - Initialize a Repository:
     ```bash
     git init
     ```
   - Clone a Repository:
     ```bash
     git clone <repository-url>
     ```
   - Check Status:
     ```bash
     git status
     ```
   - Add Files to Staging Area:
     ```bash
     git add <filename>  # To add a specific file
     git add .           # To add all changes
     ```
   - Commit Changes:
     ```bash
     git commit -m "Your commit message here"
     ```
   - View Commit History:
     ```bash
     git log
     ```
   - Branching:
     - Create a new branch:
       ```bash
       git branch <branch-name>
       ```
     - Switch branches:
       ```bash
       git checkout <branch-name>
       ```
     - Create and switch to a new branch:
       ```bash
       git checkout -b <branch-name>
       ```
   - Merging Branches:
     ```bash
     git merge <branch-name>
     ```
   - Delete a Branch:
     ```bash
     git branch -d <branch-name>
     ```
   - Stashing Changes:
     - Save your uncommitted changes to come back later:
       ```bash
       git stash
       ```
     - Apply stashed changes:
       ```bash
       git stash apply
       ```
   - Pulling Changes from Remote:
     ```bash
     git pull origin <branch-name>
     ```
   - Pushing Changes to Remote:
     ```bash
     git push origin <branch-name>
     ```

 3. Git Workflow Basics
   - Feature Branch Workflow: Create a new branch for each feature or bug fix and work on it separately.
   - Forking Workflow: Fork a repository, make changes on your fork, and then submit a pull request to the original repository.
   - Pull Requests (PRs): PRs let you notify others about changes you’ve pushed to a branch in a repository on GitHub. It’s a key concept for code review and collaboration.
   - Rebasing vs. Merging: 
     - Merge: Combines the histories of two branches.
     - Rebase: Moves or combines a sequence of commits to a new base commit.

 4. Undoing Changes
   - Undo Unstaged Changes:
     ```bash
     git checkout -- <filename>
     ```
   - Undo Staged Changes:
     ```bash
     git reset <filename>
     ```
   - Undo Last Commit (soft reset):
     ```bash
     git reset --soft HEAD~1
     ```
   - Remove Commit and Changes (hard reset):
     ```bash
     git reset --hard HEAD~1
     ```
   - Reverting a Commit:
     ```bash
     git revert <commit-id>
     ```

 5. Resolving Merge Conflicts
   - When Git can’t automatically resolve conflicts, it will mark them in the affected files.
   - Steps to Resolve:
     1. Open the conflicted file and look for the conflict markers (`<<<<`, `====`, `>>>>`).
     2. Edit the file to remove the markers and keep the desired changes.
     3. Add the resolved file:
        ```bash
        git add <filename>
        ```
     4. Commit the merge:
        ```bash
        git commit
        ```

 6. GitHub Basics
   - Forking a Repository: Create your own copy of someone else’s project to your account.
   - Pull Requests: Propose changes to a repository, ideal for collaboration.
   - Issues: Track bugs, tasks, or enhancements in a project. Use them to manage work and prioritize.
   - Actions: Automate workflows, like testing code or deploying it to production, directly in GitHub.
   - Releases: Package and distribute project versions, tagging commits with version numbers.
   - GitHub Pages: Host web pages directly from your GitHub repository.

 7. Working with Remote Repositories
   - Add a Remote Repository:
     ```bash
     git remote add origin <repository-url>
     ```
   - View Remote URLs:
     ```bash
     git remote -v
     ```
   - Remove a Remote Repository:
     ```bash
     git remote remove <name>
     ```

 8. Git & GitHub Best Practices
   - Write Clear Commit Messages: 
     - Use the format: “Fixes [ISSUE#] - Short description of the change.”
     - Provide context to explain *why* a change was made, not just *what* was done.
   - Commit Frequently, Push Regularly: Small commits make it easier to track changes and resolve conflicts.
   - Keep Branches Organized: Delete branches after merging to keep the repository clean.
   - Use .gitignore Files: Avoid tracking unnecessary files by adding them to a `.gitignore` file.

 9. Advanced Git Commands
   - Interactive Rebase (Change History):
     ```bash
     git rebase -i HEAD~<number-of-commits>
     ```
   - Amend Last Commit:
     ```bash
     git commit --amend
     ```
   - Tagging a Commit:
     ```bash
     git tag <tag-name> <commit-id>
     git push origin <tag-name>
     ```

 10. Common Git Interview Questions
   - How is `git pull` different from `git fetch`?
   - Explain the difference between `git merge` and `git rebase`.
   - How do you resolve conflicts in Git?
   - What is the purpose of a `.gitignore` file?
   - How do you revert a commit that has already been pushed?
   - What are the differences between Git and GitHub?
   - What is the difference between Git Pull and Git Push? [Major Important]